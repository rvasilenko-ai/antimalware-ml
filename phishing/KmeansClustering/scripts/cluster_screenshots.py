"""
Cluster screenshots of phishing web-sites using images hashes

Copyright:
    Roman Vasilenko, April 2020
"""

import argparse
import sys
import os
from PIL import Image
import logging
import imagehash
import json
from collections import namedtuple
from sklearn.manifold import TSNE
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import sqlite3
import pandas as pd
from sklearn.cluster import KMeans

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


HASH_TYPE__PHASH = 'phash'
SUPPORTED_HASH_TYPES = {
    HASH_TYPE__PHASH: imagehash.phash,
}
SUPPORTED_HASH_SIZE = [8, 16, 32]


def save_fig(output_dir, fig_id, tight_layout=True, fig_extension="png", resolution=300):
    path = os.path.join(output_dir, fig_id + "." + fig_extension)
    print("Saving figure", fig_id)
    if tight_layout:
        plt.tight_layout()
    plt.savefig(path, format=fig_extension, dpi=resolution)


def plot_tsne_2D_embedding(array_2D, labels, to_show=False):
    plt.scatter(array_2D[:, 0], array_2D[:, 1], s=10, c=labels, cmap="tab10")
    plt.axis("off")
    if to_show:
        plt.show()


def  cluster_center_to_hexstr(hash_array):
    return "".join("{:02x}".format(int(x*255)) for x in hash_array)


def phash_to_array(phash):
    return [1.0*int(''.join(str(b) for b in 1 * bsq), 2)
                                     for bsq in imagehash.hex_to_hash(phash).hash]




def compute_tsne_2D_embedding(phash_array):
    tsne = TSNE()
    phash_embeddings = tsne.fit_transform(phash_array)
    phash_embeddings = (phash_embeddings - phash_embeddings.min()) / (phash_embeddings.max() - phash_embeddings.min())
    return phash_embeddings


def get_cluster_id(hash_type, hash_size, num_clusters):
    return "{}{}_{}".format(hash_type, hash_size, num_clusters)

def get_hash_id(hash_type, hash_size):
    return "{}{}".format(hash_type, hash_size)


def get_unique_hashes(df, hash_id):
    return list(set(df[hash_id].to_list()))


def do_main(argv):
    """
    Script main function
    :param argv: command line arguments
    :return:
    """
    parser = argparse.ArgumentParser(description="Cluster phishing URLs using precomputed hash")
    parser.add_argument('--hash-size', dest='hash_size', type=int, choices=SUPPORTED_HASH_SIZE,
                        help='Size of hash to cluster on')
    parser.add_argument('--num-clusters', dest='num_clusters', type=int,
                        help='Number of K mean clusters')
    parser.add_argument('--hash-type', dest='hash_type',
                        default=HASH_TYPE__PHASH, choices=SUPPORTED_HASH_TYPES,
                        help='Type of the hashing algorithm. Phash is used by default')
    parser.add_argument('--csv-file', dest='csv_file',
                        default=None,
                        help='Path to input CSV file')
    parser.add_argument('--output-dir', dest='output_dir',
                        default='.')
    parser.add_argument('--screenshot-dir', dest='screenshot_dir',
                        default=None,
                        help="""Directory containing screenshots arranged by phash8:
    <phash8_1>/
            <image1>.png
            <image2>.png
            ...
            <imageN>.png
    <phash8_2>/
            ...
    """)

    args = parser.parse_args()

    df = pd.read_csv(args.csv_file)
    hash_id = get_hash_id(args.hash_type, args.hash_size)
    cluster_id = get_cluster_id(args.hash_type, args.hash_size, args.num_clusters)
    unique_hashes = get_unique_hashes(df, hash_id)
    unique_hashes = unique_hashes[:100]
    hash_array = np.asarray([phash_to_array(hash) for hash in unique_hashes])
    hash_array = hash_array
    hash_array = hash_array.reshape((hash_array.shape[0], args.hash_size))
    hash_array = np.divide(hash_array, 255.)
    kmeans = KMeans(n_clusters=args.num_clusters, n_init=10, n_jobs=4)
    hash_clusters = kmeans.fit_predict(hash_array)

    clustering_id = "{}{}_{}".format(args.hash_type, args.hash_size, args.num_clusters)
    hash_embeddings = compute_tsne_2D_embedding(hash_array)
    plot_tsne_2D_embedding(hash_embeddings, hash_clusters)

    cluster_centers_index = [cluster_center_to_hexstr(cluster_center) for cluster_center in kmeans.cluster_centers_]
    cluster_centers = [cluster_centers_index[cluster_id] for cluster_id in hash_clusters]

    hash_clusters_data = {
        hash_id: unique_hashes,
        cluster_id: hash_clusters,
        'cluster_centers': cluster_centers,
        'tsne_embeddings_2d_x': hash_embeddings[:, 0],
        'tsne_embeddings_2d_y': hash_embeddings[:, 1],
    }
    hash_clusters_df = pd.DataFrame(data=hash_clusters_data)
    hash_clusters_df.to_csv(os.path.join(args.output_dir, "{}.csv".format(clustering_id)))
    save_fig(args.output_dir, clustering_id)


if __name__ == "__main__":
    try:
        do_main(sys.argv)
    except KeyboardInterrupt:
        logger.info("Processing interrupted by used!")